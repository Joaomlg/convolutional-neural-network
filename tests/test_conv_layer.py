import unittest

import numpy as np

from multilayer_perceptron.layers import Layer
from multilayer_perceptron.layers.input_layer import InputLayer
from multilayer_perceptron.layers.convolutional_layer import ConvolutionalLayer
from multilayer_perceptron.activations import *

class LayersTestCase(unittest.TestCase):
  def test_convolutional_layer_output_shape(self):
    input_layer = InputLayer((3, 5, 5))
    conv_layer = ConvolutionalLayer(
      num_of_kernels=12,
      kernel_size=(2, 2),
      num_of_channels=3,
      stride=(1, 1)
    )

    conv_layer.set_previus_layer(input_layer)

    expected_output_shape = (12, 4, 4)
    np.testing.assert_almost_equal(conv_layer.output_shape, expected_output_shape)
  
  def test_convolutional_layer_foward(self):
    input_layer = InputLayer((3, 3, 3))
    conv_layer = ConvolutionalLayer(
      num_of_kernels=2,
      kernel_size=(2, 2),
      num_of_channels=3,
      stride=(1, 1)
    )

    conv_layer.set_previus_layer(input_layer)

    input_data = np.array([[[[0.5026781 , 0.17503963, 0.7035029 ],
                             [0.0875963 , 0.95898526, 0.2906249 ],
                             [0.59789245, 0.13750722, 0.05413343]],

                            [[0.86959865, 0.5395017 , 0.31510959],
                             [0.7731965 , 0.37052   , 0.33491053],
                             [0.33879787, 0.61263341, 0.51932569]],

                            [[0.5115205 , 0.57057187, 0.52558047],
                             [0.87469534, 0.76166256, 0.40927288],
                             [0.92254283, 0.12122157, 0.7613438 ]]],


                           [[[0.90989822, 0.58163751, 0.49746925],
                             [0.98857205, 0.68871201, 0.38736476],
                             [0.41327394, 0.6692215 , 0.61286432]],

                            [[0.73367277, 0.15625198, 0.83019174],
                             [0.16184835, 0.15636357, 0.3537225 ],
                             [0.74125015, 0.82619118, 0.75270389]],

                            [[0.97761022, 0.41060786, 0.31127046],
                             [0.17468091, 0.31838896, 0.5493379 ],
                             [0.82079608, 0.57568749, 0.32345484]]]])
    
    input_layer.output = input_data

    conv_layer.kernels = np.array([[[[-0.04366627, -0.00117819],
                                     [-0.04888828, -0.00966405]],

                                    [[-0.0544929 , -0.0135245 ],
                                     [-0.03783223, -0.04092851]],

                                    [[ 0.04064751,  0.0621986 ],
                                     [ 0.03555618,  0.16388576]]],


                                   [[[ 0.1847834 ,  0.1447659 ],
                                     [-0.1177082 , -0.01701589]],

                                    [[-0.15503425, -0.19433954],
                                     [ 0.07207011, -0.01134353]],

                                    [[-0.00042596,  0.0217834 ],
                                     [-0.07742618, -0.10443655]]]])
    
    conv_layer.bias = np.array([0.11555168, -0.02902859])

    conv_layer.foward()

    expected_output = np.array([[[[ 0.1929525 ,  0.14604053],
                                  [ 0.13059864,  0.18243506]],

                                 [[-0.2606324 , -0.22515154],
                                  [-0.18901131,  0.00856668]]],


                                [[[ 0.08920026,  0.14941882],
                                  [ 0.12254414,  0.09160228]],

                                 [[-0.07724325, -0.19091724],
                                  [ 0.06506965, -0.0433917 ]]]])

    np.testing.assert_almost_equal(conv_layer.output, expected_output)

  def test_convolutional_layer_backward(self):
    input_layer = InputLayer((3, 3, 3))

    conv_layer = ConvolutionalLayer(
      num_of_kernels=2,
      kernel_size=(2, 2),
      num_of_channels=3,
      stride=(1, 1)
    )

    output_layer = Layer()

    conv_layer.set_previus_layer(input_layer)
    conv_layer.set_next_layer(output_layer)

    input_data = np.array([[[[0.5026781 , 0.17503963, 0.7035029 ],
                             [0.0875963 , 0.95898526, 0.2906249 ],
                             [0.59789245, 0.13750722, 0.05413343]],

                            [[0.86959865, 0.5395017 , 0.31510959],
                             [0.7731965 , 0.37052   , 0.33491053],
                             [0.33879787, 0.61263341, 0.51932569]],

                            [[0.5115205 , 0.57057187, 0.52558047],
                             [0.87469534, 0.76166256, 0.40927288],
                             [0.92254283, 0.12122157, 0.7613438 ]]],


                           [[[0.90989822, 0.58163751, 0.49746925],
                             [0.98857205, 0.68871201, 0.38736476],
                             [0.41327394, 0.6692215 , 0.61286432]],

                            [[0.73367277, 0.15625198, 0.83019174],
                             [0.16184835, 0.15636357, 0.3537225 ],
                             [0.74125015, 0.82619118, 0.75270389]],

                            [[0.97761022, 0.41060786, 0.31127046],
                             [0.17468091, 0.31838896, 0.5493379 ],
                             [0.82079608, 0.57568749, 0.32345484]]]])
    
    input_layer.output = input_data

    conv_layer.kernels = np.array([[[[-0.04366627, -0.00117819],
                                     [-0.04888828, -0.00966405]],

                                    [[-0.0544929 , -0.0135245 ],
                                     [-0.03783223, -0.04092851]],

                                    [[ 0.04064751,  0.0621986 ],
                                     [ 0.03555618,  0.16388576]]],


                                   [[[ 0.1847834 ,  0.1447659 ],
                                     [-0.1177082 , -0.01701589]],

                                    [[-0.15503425, -0.19433954],
                                     [ 0.07207011, -0.01134353]],

                                    [[-0.00042596,  0.0217834 ],
                                     [-0.07742618, -0.10443655]]]])

    conv_layer.bias = np.array([0.11555168, -0.02902859])

    output_layer.gradient = np.array([[[[0.03478996, 0.0792425 ],
                                        [0.07164701, 0.04425164]],

                                       [[0.02943024, 0.08380285],
                                        [0.08738756, 0.02173393]]],


                                      [[[0.00761398, 0.09481776],
                                        [0.04980638, 0.01677931]],

                                       [[0.03319189, 0.03434629],
                                        [0.03424299, 0.07101086]]]])

    conv_layer.backward()

    expected_input_gradient = np.array([[[[ 3.91907296e-03,  1.62446581e-02,  1.20384320e-02],
                                          [ 7.85421043e-03,  7.47833084e-05,  9.02411005e-04],
                                          [-1.37889311e-02, -6.90102588e-03, -7.97472295e-04]],

                                         [[-6.45850156e-03, -2.35004429e-02, -1.73579233e-02],
                                          [-1.66474584e-02, -2.24487360e-02, -9.01614094e-03],
                                          [ 3.58746458e-03, -4.03146026e-03, -2.05769323e-03]],

                                         [[ 1.40158905e-03,  5.99029096e-03,  6.75428335e-03],
                                          [ 1.83337513e-03,  7.10641377e-03,  7.46046579e-03],
                                          [-4.21859139e-03,  2.50611313e-03,  4.98239739e-03]]],


                                        [[[ 5.80083608e-03,  7.00236856e-03,  4.86045751e-03],
                                          [-1.26513782e-04,  7.97078621e-03,  8.75942536e-03],
                                          [-6.46562930e-03, -1.02428784e-02, -1.37046913e-03]],

                                         [[-5.56078691e-03, -1.70452171e-02, -7.95720508e-03],
                                          [-5.91884136e-03, -2.10518111e-02, -1.82975079e-02],
                                          [ 5.83609568e-04,  2.05602444e-03, -1.49226571e-03]],

                                         [[ 2.95350645e-04,  5.03608630e-03,  6.64571084e-03],
                                          [-2.89278138e-04,  2.98903581e-03,  1.45427804e-02],
                                          [-8.80379654e-04, -3.15155090e-04, -4.66624015e-03]]]])

    expected_kernel_gradient = np.array([[[[0.20294223, 0.23580547],
                                           [0.23260384, 0.15422821]],

                                          [[0.17588449, 0.17873605],
                                           [0.17448455, 0.19481306]],

                                          [[0.21980243, 0.19189596],
                                           [0.24430782, 0.18991735]]],


                                         [[[0.19089613, 0.24170934],
                                           [0.25632162, 0.16837168]],

                                          [[0.19278924, 0.14611531],
                                           [0.19152138, 0.20287494]],

                                          [[0.23100339, 0.21052353],
                                           [0.25854543, 0.15597212]]]])

    expected_bias_gradient = np.array([0.39894854, 0.39514661])

    np.testing.assert_almost_equal(conv_layer.gradient, expected_input_gradient)

    np.testing.assert_almost_equal(conv_layer.kernel_gradient, expected_kernel_gradient)

    np.testing.assert_almost_equal(conv_layer.bias_gradient, expected_bias_gradient)

if __name__ == '__main__':
  unittest.main()