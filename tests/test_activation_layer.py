import unittest
import numpy as np

from multilayer_perceptron.layers import ActivationLayer
from multilayer_perceptron.activations import *

class ReluLayerTestCase(unittest.TestCase):
  def test_1d_forward(self):
    activation_layer = ActivationLayer(function=relu)

    input_data = np.array([[ 0.5157249 , -0.74360051, -0.92559627, -0.08085934],
                           [-0.91502943, -0.11662449,  0.79250249,  0.61217103],
                           [-0.26313809, -0.07559624, -0.71902317,  0.57072333]])

    output = activation_layer.forward(input_data)

    expected_output = np.array([[0.5157249 , 0.        , 0.        , 0.        ],
                                [0.        , 0.        , 0.79250249, 0.61217103],
                                [0.        , 0.        , 0.        , 0.57072333]])

    np.testing.assert_almost_equal(output, expected_output)

  def test_1d_backward(self):
    activation_layer = ActivationLayer(function=relu)

    activation_layer.prev_input = np.array([[ 0.5157249 , -0.74360051, -0.92559627, -0.08085934],
                                            [-0.91502943, -0.11662449,  0.79250249,  0.61217103],
                                            [-0.26313809, -0.07559624, -0.71902317,  0.57072333]])

    output_gradient = np.array([[ 0.59697531,  0.34338291,  0.37759228,  0.28577241],
                                [-0.94458974,  0.35880283, -0.6239214 , -0.84839996],
                                [ 0.60871552, -0.94711843,  0.05887768,  0.323484  ]])

    input_gradient = activation_layer.backward(output_gradient)

    expected_input_gradient = np.array([[ 0.59697531,  0.        ,  0.        ,  0.        ],
                                        [ 0.        ,  0.        , -0.6239214 , -0.84839996],
                                        [ 0.        ,  0.        ,  0.        ,  0.323484  ]])

    np.testing.assert_almost_equal(input_gradient, expected_input_gradient)
  
  def test_2d_forward(self):
    activation_layer = ActivationLayer(function=relu)

    input_data = np.array([[[[-0.52057972, -0.34803756,  0.83428088],
                             [ 0.16173791,  0.55034535, -0.46518209],
                             [-0.9499261 , -0.60003193,  0.2512316 ]],

                            [[ 0.10109098, -0.22183024,  0.9939521 ],
                             [-0.2491673 ,  0.20076065,  0.48416384],
                             [ 0.27768235, -0.37751055, -0.08481337]]],


                           [[[ 0.79569711, -0.16647949, -0.01252188],
                             [ 0.93431819,  0.75585484,  0.98969481],
                             [-0.50796895,  0.52848344, -0.51585192]],

                            [[ 0.50651307,  0.07476521, -0.63044338],
                             [-0.86607466, -0.47374596, -0.22901805],
                             [ 0.77202758,  0.76099295,  0.42129793]]]])

    output = activation_layer.forward(input_data)

    expected_output = np.array([[[[0.        , 0.        , 0.83428088],
                                  [0.16173791, 0.55034535, 0.        ],
                                  [0.        , 0.        , 0.2512316 ]],

                                 [[0.10109098, 0.        , 0.9939521 ],
                                  [0.        , 0.20076065, 0.48416384],
                                  [0.27768235, 0.        , 0.        ]]],


                                [[[0.79569711, 0.        , 0.        ],
                                  [0.93431819, 0.75585484, 0.98969481],
                                  [0.        , 0.52848344, 0.        ]],

                                 [[0.50651307, 0.07476521, 0.        ],
                                  [0.        , 0.        , 0.        ],
                                  [0.77202758, 0.76099295, 0.42129793]]]])

    np.testing.assert_almost_equal(output, expected_output)

  def test_2d_backward(self):
    activation_layer = ActivationLayer(function=relu)

    activation_layer.prev_input = np.array([[[[-0.52057972, -0.34803756,  0.83428088],
                                              [ 0.16173791,  0.55034535, -0.46518209],
                                              [-0.9499261 , -0.60003193,  0.2512316 ]],

                                             [[ 0.10109098, -0.22183024,  0.9939521 ],
                                              [-0.2491673 ,  0.20076065,  0.48416384],
                                              [ 0.27768235, -0.37751055, -0.08481337]]],


                                            [[[ 0.79569711, -0.16647949, -0.01252188],
                                              [ 0.93431819,  0.75585484,  0.98969481],
                                              [-0.50796895,  0.52848344, -0.51585192]],

                                             [[ 0.50651307,  0.07476521, -0.63044338],
                                              [-0.86607466, -0.47374596, -0.22901805],
                                              [ 0.77202758,  0.76099295,  0.42129793]]]])

    output_gradient = np.array([[[[-0.76051671, -0.31250277,  0.02063043],
                                  [-0.49798754,  0.88158911,  0.72184405],
                                  [-0.69881879,  0.22017243, -0.00189465]],

                                 [[ 0.85824634, -0.59436263, -0.6141991 ],
                                  [-0.13099497,  0.69371474, -0.1460605 ],
                                  [ 0.81327335, -0.25977632,  0.9498424 ]]],


                                [[[ 0.53616708, -0.61776296,  0.05901576],
                                  [-0.37217869, -0.15364623,  0.22799122],
                                  [-0.421466  ,  0.70419029, -0.46078673]],

                                 [[-0.86111647, -0.85412588, -0.39177549],
                                  [ 0.74394276, -0.63983689, -0.83772855],
                                  [ 0.03391009,  0.00748564,  0.1850052 ]]]])

    input_gradient = activation_layer.backward(output_gradient)

    expected_input_gradient = np.array([[[[ 0.        ,  0.        ,  0.02063043],
                                          [-0.49798754,  0.88158911,  0.        ],
                                          [ 0.        ,  0.        , -0.00189465]],

                                         [[ 0.85824634,  0.        , -0.6141991 ],
                                          [ 0.        ,  0.69371474, -0.1460605 ],
                                          [ 0.81327335,  0.        ,  0.        ]]],


                                        [[[ 0.53616708,  0.        ,  0.        ],
                                          [-0.37217869, -0.15364623,  0.22799122],
                                          [ 0.        ,  0.70419029,  0.        ]],

                                         [[-0.86111647, -0.85412588,  0.        ],
                                          [ 0.        ,  0.        ,  0.        ],
                                          [ 0.03391009,  0.00748564,  0.1850052 ]]]])

    np.testing.assert_almost_equal(input_gradient, expected_input_gradient)

if __name__ == '__main__':
  unittest.main()